from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (TimeoutException, NoSuchElementException,
                                        ElementClickInterceptedException, WebDriverException,
                                        StaleElementReferenceException, ElementNotInteractableException)
from selenium.webdriver.chrome.service import Service
import pandas as pd
import time
import sys


# Fun√ß√£o para conectar ao navegador j√° aberto
def conectar_navegador_existente():
    """
    Inicializa o Objeto Robo, configurando e iniciando o driver do Chrome.
    """
    try:
        # Configura√ß√£o do registro
        # Inicia as op√ß√µes do Chrome
        chrome_options = webdriver.ChromeOptions()
        # Endere√ßo de depura√ß√£o para conex√£o com o Chrome
        chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        # Inicializa o driver do Chrome com as op√ß√µes e o gerenciador de drivers
        driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=chrome_options)

        print("‚úÖ Conectado ao navegador existente com sucesso.")

        return driver
    except WebDriverException as e:
        # Imprime mensagem de erro se a conex√£o falhar
        print(f"‚ùå Erro ao conectar ao navegador existente: {type(e).__name__}\nError: {str(e)[:200]}...")


# Trunca a mensagem de erro
def truncate_error(msg, max_error_length=100):
    """Truncates error message with ellipsis if too long"""
    return (msg[:max_error_length] + '...') if len(msg) > max_error_length else msg


# Fun√ß√£o para clicar em um elemento com retry
def clicar_elemento(driver, xpath, retries=3, prt: bool = True):
    """Attempts to click an element with truncated error messages.

    Args:
        driver: WebDriver instance
        xpath: XPath of the element to click
        retries: Number of retry attempts
        prt: If the text should be printed or not
    """
    last_error = None

    for tentativa in range(1, retries + 1):
        try:
            remover_backdrop(driver)
            elemento = WebDriverWait(driver, 7).until(
                EC.element_to_be_clickable((By.XPATH, xpath)))
            if prt:
                print(f"‚úÖ Clicked element (attempt {tentativa}): {elemento.text[:30]}...")

            if elemento.is_displayed():
                elemento.click()
                return True
        except StaleElementReferenceException:
            print("üîÑ Stale element detected! Attempting recovery...")  # Debug print
            # Wait for the old element to go stale, then re-find
            WebDriverWait(driver, 10).until(EC.staleness_of(elemento))
            new_element = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, xpath)))
            new_element.click()

        except ElementClickInterceptedException as e:
            last_error = truncate_error(f"Element intercepted on click (attempt {tentativa}): {str(e)}")
            print(f"‚ö†Ô∏è {last_error}")

        except TimeoutException as e:
            last_error = truncate_error(f"Timeout (attempt {tentativa}): {str(e)[:30]}")
            print(f"‚è±Ô∏è {last_error}")

        except NoSuchElementException as e:
            last_error = truncate_error(f"Element not found (attempt {tentativa}): {str(e)}")
            print(f"üîç {last_error}")

        except Exception as e:
            last_error = truncate_error(f"Unexpected error (attempt {tentativa}): {str(e)}")
            print(f"‚ùå {last_error}")

        if tentativa < retries:
            time.sleep(tentativa)

    print(truncate_error(f"‚ùå Failed after {retries} attempts for {elemento.text}. Last error: {last_error}"))
    return False


# Fun√ß√£o para inserir texto em um campo com retry
def inserir_texto(driver, xpath, texto, retries=3):
    """
        Insere texto em um campo de formul√°rio identificado por XPath, com tentativas de repeti√ß√£o.

        Esta fun√ß√£o tenta localizar um elemento em uma p√°gina web usando o XPath fornecido,
        remove eventuais elementos sobrepostos (backdrop), limpa o campo e insere o texto especificado.
        Em caso de falha, realiza novas tentativas at√© atingir o n√∫mero m√°ximo definido.

        Parameters:
            driver: Inst√¢ncia do WebDriver utilizada para controlar o navegador.
            xpath (str): XPath do campo onde o texto deve ser inserido.
            texto (str): Texto que ser√° inserido no campo.
            retries (int, optional): N√∫mero m√°ximo de tentativas em caso de erro. Padr√£o √© 3.

        Returns:
            bool: Retorna True se o texto for inserido com sucesso, False caso contr√°rio.
        """
    for tentativa in range(retries):
        try:
            remover_backdrop(driver)  # Remove o backdrop antes de inserir texto
            elemento = WebDriverWait(driver, 7).until(
                EC.presence_of_element_located((By.XPATH, xpath)))
            elemento.clear()
            elemento.send_keys(texto)
            print(f"‚úÖ Texto inserido no campo:{elemento.text}")
            return True
        except Exception as erro:
            print(f"‚ùå Erro ao inserir texto no campo {xpath} (tentativa {tentativa + 1}): {erro[:50]}")
            time.sleep(1)  # Espera antes de tentar novamente
    print(f"‚ùå Falha ap√≥s {retries} tentativas para inserir texto em {xpath}")
    return False


# Fun√ß√£o para obter texto de um elemento
def obter_texto(driver, xpath):
    """
    Obt√©m o texto de um elemento da p√°gina identificado por XPath.

    Esta fun√ß√£o aguarda a presen√ßa do elemento na p√°gina, remove eventuais sobreposi√ß√µes
    (como backdrop), extrai o texto e retorna o conte√∫do tratado. Se o elemento n√£o contiver
    texto vis√≠vel ou ocorrer um erro, retorna None.

    Parameters:
        driver: Inst√¢ncia do WebDriver utilizada para controlar o navegador.
        xpath (str): XPath do elemento de onde o texto ser√° extra√≠do.

    Returns:
        str or None: Texto extra√≠do do elemento, ou None em caso de erro ou se o texto estiver vazio.
    """
    try:
        remover_backdrop(driver)  # Remove o backdrop antes de obter texto
        elemento = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, xpath)))
        texto = elemento.text.strip()
        return texto if texto else None
    except Exception as erro:
        print(f"‚ùå Erro ao obter texto do elemento {xpath}: {erro}")
        return None


# Evidencia o elemento que est√° sendo tocado
def highlight_element(driver, element, effect_time=3, color="red", border=3):
    """Highlights an element with a colored border"""
    driver.execute_script(
        """
        let oldStyle = arguments[0].getAttribute('style');
        arguments[0].setAttribute('style', 
            `border: {border}px solid {color}; 
             box-shadow: 0px 0px 10px {color}; 
             background: rgba(255,255,0,0.2); 
             transition: all 0.3s ease;`);
        setTimeout(function() {{
            arguments[0].setAttribute('style', oldStyle || '');
        }}, {effect_time} * 1000);
        """.format(border=border, color=color, effect_time=effect_time),
        element
    )


# Verifica o valor dos campos com seletores bin√°rios
def get_radio_selection(driver):
    def get_angular_radio_state():
        """
        Robustly gets radio button state in Angular applications with:
        - Angular stability waiting
        - Multiple fallback methods
        - Comprehensive error handling
        - Automatic retries
        """

        def wait_for_angular():
            """Specialized wait for Angular applications"""
            try:
                driver.execute_async_script("""
                var callback = arguments[arguments.length - 1];
                if (window.getAllAngularTestabilities) {
                    var testabilities = window.getAllAngularTestabilities();
                    var count = testabilities.length;
                    if (count === 0) return callback(true);

                    var decrement = function() {
                        count--;
                        if (count === 0) callback(true);
                    };

                    testabilities.forEach(function(t) {
                        t.whenStable(decrement);
                    });
                } else {
                    callback(true);  // Proceed if not Angular app
                }
                """)
            except:
                # Fallback to simple wait if Angular detection fails
                time.sleep(1)

        def execute_with_fallbacks():
            """Tries multiple detection methods in priority order"""
            methods = [
                # 1. Check native DOM properties first
                lambda: driver.execute_script("""
                    const input = arguments[0].querySelector('input[type="radio"]:checked');
                    return input ? input.value : null;
                """, radio_group),

                # 2. Check Angular model binding
                lambda: radio_group.get_attribute('ng-reflect-model'),

                # 3. Check for hidden form control value
                lambda: driver.execute_script("""
                    const form = arguments[0].closest('form');
                    if (!form) return null;
                    const formCtrl = window.ng?.getComponent(form)?.form?.get('isRecursosIndicados');
                    return formCtrl?.value ?? null;
                """, radio_group),

                # 4. Check visual state as last resort
                lambda: check_visual_state(radio_group)
            ]

            for method in methods:
                try:
                    result = method()
                    if result is not None:
                        return str(result).lower()  # Normalize to string
                except:
                    continue

            return None

        def check_visual_state(element):
            """Fallback for visually determining state"""
            active_class = driver.execute_script("""
            return window.getComputedStyle(arguments[0]).getPropertyValue('active');
            """, element)
            return 'true' if active_class and 'active' in active_class else None

        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                # 1. Wait for Angular to stabilize (critical for Angular apps)
                wait_for_angular()

                # 2. Wait for the specific element to be interactable
                radio_group = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, 'br-radio[formcontrolname="isRecursosIndicados"]'))
                )

                # 3. Try multiple detection methods with fallbacks
                value = execute_with_fallbacks()

                if value is not None:
                    return value

                time.sleep(1)  # Brief pause before retry

            except Exception as e:
                print(f"Attempt {attempt + 1} failed:", str(e))

        print("All attempts exhausted. Saving debug information...")
        return None

    try:
        radio_button = get_angular_radio_state()

        # Execute the script and get the result
        selected_value = radio_button

        # Determine the selected option
        if selected_value:
            print("üîò Selected: Sim (true)")
            return "Sim"
        else:
            print("üîò Selected: N√£o (false)")
            return "N√£o"

    except Exception as e:
        print(f"‚ö†Ô∏è Error checking radio buttons: {str(e)[:60]}")
        print(f"üîò Op√ß√£o selecionada: N√£o")
        return "N√£o"


# Fun√ß√£o para obter o valor de um campo desabilitado
def obter_valor_campo_desabilitado(driver, xpath, call=None):
    """
           Obt√©m o valor de um campo desabilitado em uma p√°gina web usando v√°rias estrat√©gias.

           Esta fun√ß√£o tenta localizar um campo (possivelmente desabilitado) usando seu XPath e obter
           seu valor por meio de diferentes abordagens: atributo `value`, execu√ß√£o de JavaScript ou
           leitura direta do texto vis√≠vel. Se o campo n√£o for encontrado ou n√£o contiver valor, retorna
           um valor padr√£o ou None.

           Parameters:
               driver: Inst√¢ncia do WebDriver usada para controlar o navegador.
               xpath (str): XPath do campo de onde o valor deve ser extra√≠do.
               call (int, optional): N√∫mero identificador da chamada, usado para fins de log/debug. Padr√£o √© None.

           Returns:
               str or None: Valor extra√≠do do campo, 'Campo Vazio' se n√£o encontrado ou em caso de falhas,
               ou None se o campo estiver presente mas sem valor identific√°vel.
    """
    try:
        remover_backdrop(driver)  # Remove o backdrop antes de obter valor
        try:
            elemento = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, xpath)))
        except TimeoutException:
            print(f"‚è±Ô∏è Timeout: Elemento n√£o encontrado em 5s - {truncate_error(xpath)}")
            return "Campo Vazio"
        except NoSuchElementException:
            print(f"üîç Elemento n√£o existe - {truncate_error(xpath)}")
            return "Campo Vazio"

            # 2. Tentar m√©todos alternativos para obter valor
        valor = None

        # M√©tod 1: Atributo value padr√£o
        try:
            WebDriverWait(driver, 2).until(
                lambda d: elemento.get_attribute("value") and elemento.get_attribute("value").strip() != "")
            valor = elemento.get_attribute("value")
        except TimeoutException:
            pass  # Vamos tentar outros m√©todos

        # M√©tod 2: JavaScript para campos desabilitados
        if not valor:
            try:
                valor = driver.execute_script(
                    "return arguments[0].value || arguments[0].defaultValue;",
                    elemento)
            except Exception as js_err:
                print(f"‚ö†Ô∏è JS fallback falhou: {truncate_error(str(js_err))}")
                pass

        # M√©tod 3: JavaScript para campos desabilitados
        if not valor:
            try:
                valor = elemento.text
            except AttributeError:
                valor = None  # or use a default value like '' or 'N√£o encontrado'
                print("‚ö†Ô∏è Aviso: elemento n√£o possui atributo 'text'.")
            except Exception as e:
                valor = None
                if call:
                    print(f'Erro gerado pela call n¬∫{call}')
                print(f"‚ùå Erro inesperado ao acessar elemento.text: {type(e).__name__} - {e}")

        # Tratamento do valor retornado
        if valor and str(valor).strip():
            valor = str(valor).strip()
            print(f"üì¶üìÑ Valor obtido: {valor[:50]}...")  # Trunca valores longos
            return valor
        else:
            print(f"‚ÑπÔ∏è Campo:{elemento.text} vazio ou sem valor v√°lido")
            return
    except StaleElementReferenceException:
        print(f"üëª Elemento tornou-se obsoleto - {truncate_error(xpath)}")
        return
    except Exception as erro:
        print(f"‚ùå Erro ao tentar obetar valor do campo. Err: {type(erro).__name__} -"
              f" {truncate_error(str(erro))}")
        return "Campo Vazio"


# Fun√ß√£o para remover o backdrop
def remover_backdrop(driver):
    """
    Remove elementos de sobreposi√ß√£o (backdrop) da p√°gina.

    Esta fun√ß√£o executa um script JavaScript para remover todos os elementos com a classe
    'backdrop' do DOM. √â √∫til para evitar bloqueios visuais ou funcionais em intera√ß√µes
    automatizadas com a interface da p√°gina.

    Parameters:
       driver: Inst√¢ncia do WebDriver usada para controlar o navegador.

    Returns:
        None
        """
    try:
        driver.execute_script("""
            var backdrops = document.getElementsByClassName('backdrop');
            while(backdrops.length > 0){
                backdrops[0].parentNode.removeChild(backdrops[0]);
            }
        """)
        # print("‚úÖ Backdrop removido com sucesso!")
    except Exception as erro:
        print(f"‚ùå Erro ao remover backdrop: {erro}")


# Fun√ß√£o que aplica a espera pelo elemento
def wait_for_element(driver, xpath: str, timeout: int = 5) -> bool:
    """Aguarda at√© que um elemento esteja presente na p√°gina."""
    try:
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath)))
        return True
    except Exception:
        return False


# Extrai os dados da tabela de forma concatenada
def extract_all_rows_text(driver, table_xpath, timeout=2.5):
    """
    Extracts all text content from each row in an ngx-datatable.

    Args:
        driver: Selenium WebDriver instance
        table_xpath: XPath of the datatable
        timeout: Maximum wait time in seconds

    Returns:
        list: List of strings containing each row's full text content
        or None if failed
    """
    try:
        # Wait for at least one row to be present
        table = WebDriverWait(driver, timeout).until(EC.presence_of_element_located((By.XPATH, table_xpath)))

        # Now fetch all rows
        rows = table.find_elements(By.CSS_SELECTOR, 'datatable-body-row')

        row_data = []
        if not rows:
            print("‚ö†Ô∏è No rows found in table")
            return None

        for idx, row in enumerate(rows, start=1):
            # For each row, find all the cells
            cells = row.find_elements(By.CSS_SELECTOR, 'datatable-body-cell')

            for cell in cells:
                # Each cell has a label div where the text is
                label = cell.find_element(By.CSS_SELECTOR, 'div.datatable-body-cell-label')
                text = label.text.strip()
                row_data.append(text)

        joined_row = " | ".join(row_data)

        return joined_row

    except TimeoutException:
        print(f"‚åõ Timeout: No rows appeared within {timeout} seconds")
        return None
    except Exception as e:
        print(f"‚ùå Extraction failed: {str(e)[:100]}...")
        return None


# Extrai os dados da Lista de Documentos H√°beis
def extrat_all_cells_text(driver, table_xpath, col_idx, timeout=10):
    """
    Extracts all text content from a specific column in a ngx-datatable across all pages.

    Args:
        driver: Selenium WebDriver instance
        table_xpath: XPath of the datatable
        col_idx: Index of the column to extract (0-based)
        timeout: Maximum wait time in seconds

    Returns:
        str: All column data joined with " | " or None if failed
    """
    col_data = []
    processed_pages = set()
    current_page = 1

    try:
        while True:
            # Wait for table to be present
            table = WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.XPATH, table_xpath))
            )

            # Get all rows in current page
            rows = table.find_elements(By.CSS_SELECTOR, 'datatable-body-row')
            if not rows:
                print("‚ö†Ô∏è No rows found in table")
                break
            # Get current page information (e.g., current page number text or unique identifier)
            try:
                pagination_info = driver.find_element(By.XPATH,
                       '/html/body/transferencia-especial-root/br-main-layout/div/div'
                       '/div/main/transferencia-especial-main/transferencia-plano-acao'
                       '/transferencia-cadastro/br-tab-set/div/nav'
                       '/transferencia-plano-acao-dados-orcamentarios/br-table[2]/div'
                       '/ngx-datatable/div/datatable-footer/div/br-pagination-table'
                       '/div/br-select[2]')
                pagination_info = pagination_info.text.strip()
            except NoSuchElementException:
                pagination_info = str(current_page)

            if f"{current_page}" in processed_pages:
                print(f"‚ö†Ô∏è Already processed page {current_page}, breaking loop")
                break

            processed_pages.add(current_page)

            for row in rows:
                cells = row.find_elements(By.CSS_SELECTOR, 'datatable-body-cell')
                if len(cells) > col_idx:
                    cell = cells[col_idx]
                    label = cell.find_element(By.CSS_SELECTOR, 'div.datatable-body-cell-label')
                    # Try to find span or button with text
                    text_elements = label.find_elements(By.XPATH, './/*[text()]')
                    if text_elements:
                        text = text_elements[0].text.strip()
                    else:
                        text = label.text.strip()
                    if text:  # Only add non-empty text
                        col_data.append(text)
            try:
                next_button = driver.find_element(By.XPATH,
                              '//button[contains(@class, "br-button") and contains(@class, "next")]')
                if not next_button.is_enabled():
                    print("‚ÑπÔ∏è No more pages to process")
                    break
                next_button.click()
                current_page += 1
                # Wait for page to load
                WebDriverWait(driver, timeout).until(
                    EC.staleness_of(rows[0])  # Wait until old rows are gone
                )
            except (NoSuchElementException, ElementNotInteractableException):
                print("‚ÑπÔ∏è No next page button found or not clickable")
                break

        return " | ".join(col_data) if col_data else None

    except Exception as e:
        print(f"‚ùå Error extracting table data: {str(e)}")
        return None


# Navega pela primeira p√°gina e coleta os dados
def loop_primeira_pagina(driver, plano_acao: dict):
    """ Loop que pega dados da primeira aba """
    #  [0] Benefici√°rio // [1] UF // [2] Banco // [3] Ag√™ncia // [4] Conta // [5] Situa√ß√£o Conta //
    #  [6] Emenda Parlamentar // [7] Valor de Investimento // # [8] Valor de Custeio //
    #  [9] Finalidades // [10] Programa√ß√µes Or√ßament√°rias selecionadas
    lista_caminhos = [
        # Benefici√°rio [0][1]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[1]/div[1]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[1]/div[2]/br-input/div/div[1]/input',

        # Banco [2]>[5]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[2]/div[1]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[2]/div[2]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[2]/div[3]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[1]/fieldset/div[2]/div[2]/div[4]/br-input/div/div[1]/input',

        # Dados emenda parlamentar [6] > [8]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[2]/fieldset/div[2]/div/div[1]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[2]/fieldset/div[2]/div/div[3]/br-input/div/div[1]/input',

        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[2]/fieldset/div[2]/div/div[2]/br-input/div/div[1]/input',

        # Finalidade [9]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[3]/fieldset/div[2]',

        # Objeto de Execu√ß√£o [10]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-basicos/form/br-fieldset[3]/fieldset/div[2]/div[1]/div/br-textarea/div/div[1]/div/textarea'
    ]

    time.sleep(1.5)
    plano_acao["beneficiario"]["nome"] = obter_valor_campo_desabilitado(driver, lista_caminhos[0])
    plano_acao["beneficiario"]["uf"] = obter_valor_campo_desabilitado(driver, lista_caminhos[1])
    plano_acao["dados_bancarios"]["banco"] = obter_valor_campo_desabilitado(driver, lista_caminhos[2])

    plano_acao["dados_bancarios"]["agencia"] = obter_valor_campo_desabilitado(driver, lista_caminhos[3])
    plano_acao["dados_bancarios"]["conta"] = obter_valor_campo_desabilitado(driver, lista_caminhos[4])
    plano_acao["dados_bancarios"]["situacao"] = obter_valor_campo_desabilitado(driver, lista_caminhos[5])

    plano_acao["emenda"]["numero"] = obter_valor_campo_desabilitado(driver, lista_caminhos[6])
    plano_acao["emenda"]["valor"] = obter_valor_campo_desabilitado(driver, lista_caminhos[7])
    plano_acao["emenda"]["custeio"] = obter_valor_campo_desabilitado(driver, lista_caminhos[8])

    plano_acao["finalidade"] = extract_all_rows_text(driver=driver, table_xpath=lista_caminhos[9])

    plano_acao["objeto_de_execu√ß√£o"] = obter_valor_campo_desabilitado(driver, lista_caminhos[10])

    return plano_acao


# Navega pela primeira p√°gina e coleta os dados
def loop_segunda_pagina(driver, index, plano_acao: dict, df, df_path):
    """ Loop que pega dados da segunda aba em diante"""
    # [0] Aba Dados Or√ßament√°rios
    # [1] Pagamentos Empenho ; Pagamentos Valor ; Pagamentos Ordem
    # [2] Aba Plano de Trabalho
    # [3] Declaracoes Nao Uso Pessoal ; Recursos no Or√ßamento do Benefici√°rio
    # [4] Classifica√ß√£o Or√ßament√°ria de Despesa
    # [5] Per√≠odo de Execu√ß√£o
    # [6] Prazo de Execu√ß√£o em meses
    # [7] Historico Sistema ; Historico Concluido
    # [8] Execucao Executor ; Objeto ; Metas

    lista_caminhos = [
        # [0]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main/'
        'transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/ul/li[2]/button/span',

        # [1]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-dados'
        '-orcamentarios/br-table[2]/div/ngx-datatable',

        # [2]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main/'
        'transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/ul/li[3]/button/span',

        # [3]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/form/div/div/br-fieldset[2]/fieldset/div[2]/div[1]/div/br-checkbox/div/label',

        # [4]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/form/div/div/br-fieldset[1]/fieldset/div[2]/div[3]/div/br-textarea/div/div['
        '1]/div/textarea',

        # [5]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/form/div/div/br-fieldset[2]/fieldset/div[2]/div[2]/div[1]/br-input/div/div[1]/input',

        # [6]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/transferencia-plano-trabalho-resumo/div/div[6]/div[2]/div',

        # [7]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/br-fieldset[2]/fieldset/div[2]/div',

        # [8]
        '/html/body/transferencia-especial-root/br-main-layout/div/div/div/main/transferencia-especial-main'
        '/transferencia-plano-acao/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano-acao-plano'
        '-trabalho/form/div/div/br-fieldset[3]/fieldset/div[2]/div[2]/div[2]/br-table/div/ngx-datatable',
    ]

    try:
        # Aba Dados Or√ßament√°rios
        clicar_elemento(driver, lista_caminhos[0])
        time.sleep(3)

        # Empenho section
        plano_acao["pagamentos"]["empenho"] = extrat_all_cells_text(driver, lista_caminhos[1], 0)
        plano_acao["pagamentos"]["valor"] = extrat_all_cells_text(driver, lista_caminhos[1], 3)
        plano_acao["pagamentos"]["ordem"] = extrat_all_cells_text(driver, lista_caminhos[1], 5)

        # Aba Plano de Trabalho
        clicar_elemento(driver, lista_caminhos[2])
        time.sleep(5)

        # Declara√ß√µes section
        plano_acao["declaracoes"]["recursos_orcamento"] = get_radio_selection(driver)
        plano_acao["declaracoes"]["nao_uso_pessoal"] = obter_valor_campo_desabilitado(driver,
                                                                                      lista_caminhos[3])
        if plano_acao["declaracoes"]["nao_uso_pessoal"] not in ['', 'Campo Vazio']:
            plano_acao["declaracoes"]["nao_uso_pessoal"] = 'Sim'
        else:
            plano_acao["declaracoes"]["nao_uso_pessoal"] = 'N√£o'

        # Classifica√ß√£o Or√ßament√°ria de Despesa
        plano_acao["classificacao_orcamentaria"] = obter_valor_campo_desabilitado(driver, lista_caminhos[4])

        # Prazo de Execu√ß√£o em meses \\ Periodo_exec
        plano_acao["prazo_de_execucao"] = obter_valor_campo_desabilitado(driver, lista_caminhos[5])
        plano_acao["periodo_exec"] = obter_valor_campo_desabilitado(driver, lista_caminhos[6])

        # Hist√≥rico section
        #coletar_dados_hist(driver, lista_caminhos[7], index=index, df_path=df_path)

        # Execu√ß√£o and Metas section
        coletar_dados_listas(driver, lista_caminhos[8], index=index, df=df, df_path=df_path)

        return plano_acao

    except Exception as erro:
        print(f"‚ùå Erro inesperado: {type(erro).__name__} - {truncate_error(str(erro))}")
        return None


# Coleta os dados do hist√≥rico
def coletar_dados_hist(driver, tabela_xpath, index, df_path):
    """
    Coleta e armazena dados hist√≥ricos de uma tabela em uma p√°gina web.

    Esta fun√ß√£o localiza uma tabela de hist√≥rico via XPath em uma p√°gina carregada por Selenium,
    extrai dados das linhas relevantes (como "Sistema" e "Conclu√≠do") e os armazena em um
    DataFrame lido a partir de um arquivo Excel. Os dados s√£o inseridos em posi√ß√µes apropriadas
    ou adicionados como novas linhas, se necess√°rio.

    Parameters:
        driver: Inst√¢ncia do WebDriver para controle da p√°gina.
        tabela_xpath (str): XPath que localiza a tabela de hist√≥rico na p√°gina.
        index (int): √çndice da linha no DataFrame onde os dados "Sistema" devem ser inseridos.
        df_path (str): Caminho para o arquivo Excel onde os dados ser√£o lidos e salvos.

    Side Effects:
        - L√™ e escreve em um arquivo Excel.
        - Atualiza o DataFrame com dados extra√≠dos da web.
        - Pode modificar a estrutura do DataFrame, inserindo novas linhas.

    Returns:
        None
    """

    # Helper function to check empty rows
    def is_row_empty(row_idx) -> bool:
        try:
            return all(
                pd.isna(df.at[row_idx, colmn]) or
                str(df.at[row_idx, col]).strip() in ('', 'None', 'nan')
                for colmn in colunas_para_salvar
            )
        except KeyError as err:
            print(f"‚ö†Ô∏è Missing column {err}")
            return True

    # Helper function to check empty cells
    def is_first_cell_empty(row_idx: int, col_id: int = 0) -> bool:
        """
        Verifica se a c√©lula na linha e coluna especificadas est√° vazia ou cont√©m NaN.

        A fun√ß√£o assume que existe uma vari√°vel global chamada `df` (um DataFrame pandas)
        e verifica se a c√©lula localizada pelo √≠ndice da linha e da coluna est√° vazia
        (string vazia ou NaN). Tamb√©m retorna True se os √≠ndices estiverem fora dos limites.

        Parameters:
            row_idx (int): √çndice da linha a ser verificada.
            col_id (int, optional): √çndice da coluna a ser verificada (padr√£o √© 0).

        Returns:
            bool: True se a c√©lula estiver vazia, contiver NaN ou estiver fora dos limites.
        """
        if row_idx >= len(df) or col_id >= len(df.columns):
            return True
        cell = df.iat[row_idx, col_id]
        return pd.isna(cell) or cell == ""

    print(f"\n‚öôÔ∏è Processando Hist√≥rico ‚Äî √≠ndice {index}\n")

    # Read data frame
    df = pd.read_excel(df_path, dtype=str, engine='openpyxl')

    colunas_para_salvar = ["Respons√°vel", "Data", "Situa√ß√£o"]
    # Initialize data variables
    sys_data = ["N√£o Encontrado"] * 3
    conc_data = ["N√£o Encontrado"] * 3
    last_data = ["N√£o Encontrado"] * 3
    table_data = []

    try:
        # Get all rows in the table body
        rows = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located(
            (By.XPATH, f"{tabela_xpath}//datatable-body-row")))

        # Process each row to extract cell data
        for i, row in enumerate(rows):
            try:
                cells = row.find_elements(By.XPATH, ".//datatable-body-cell")
                row_data = [cell.text.strip() if cell.text else "Empty" for cell in cells]
                table_data.append(row_data)
            except Exception as e:
                print(f"‚ö†Ô∏è Error processing row {i}: {str(e)[:50]}")
                continue

        # Search backwards for "Sistema" row
        for k in range(len(table_data) - 1, -1, -1):
            try:
                if table_data[k][0] == "Sistema":
                    sys_data = table_data[k][:3]  # First 3 columns

                    # Look for "Conclu√≠do" in subsequent rows
                    for j in range(k + 1, len(table_data)):
                        if table_data[j][2] == "Conclu√≠do":
                            conc_data = table_data[j][:3]
                            break
            except Exception as e:
                print(f"‚ùå Falha na extra√ß√£o de dados hist√≥rico: {type(e).__name__} -"
                      f" {truncate_error(str(e))}")
        try:
            if table_data[0][2].strip() == "Enviado para an√°lise":
                last_data = table_data[0]
        except Exception as i_err:
            print(f"‚ùå Erro ao comparar primeira linha da tabela hist√≥rco: {type(i_err).__name__} -"
                  f" {truncate_error(str(i_err))}")

        try:
            empty_row = next((i for i in range(index, len(df) + 1) if is_row_empty(i)), len(df))

            # Save Sistema data
            if is_row_empty(index):
                for col, val in zip(colunas_para_salvar, sys_data):
                    df.at[index, col] = val
            else:
                print(f"‚ö†Ô∏è Row {index} not empty. Finding next available...")
                if empty_row >= len(df):
                    df.loc[empty_row] = [None] * len(df.columns)
                for col, val in zip(colunas_para_salvar, sys_data):
                    df.at[empty_row, col] = val

            # Save Conclu√≠do data
            conc_start = index + 1
            current_cell = is_first_cell_empty(conc_start, 33)
            next_first_cell = is_first_cell_empty(conc_start + 1, )
            first_cell = is_first_cell_empty(conc_start)

            nova_linha_data = {col: conc_data[q] for q, col in enumerate(colunas_para_salvar)}
            nova_linha_2_data = {col_w: last_data[w] for w, col_w in enumerate(colunas_para_salvar)}

            if current_cell and first_cell and next_first_cell:
                # Insert both rows at conc_start
                new_rows = [
                    {**{col: None for col in df.columns}, **nova_linha_data},
                    {**{col: None for col in df.columns}, **nova_linha_2_data}
                ]

                upper = df.iloc[:conc_start]
                lower = df.iloc[conc_start:]
                df = pd.concat([upper, pd.DataFrame(new_rows), lower], ignore_index=True)
            else:
                # Convert the new data to a DataFrame
                new_row = {col: nova_linha_data.get(col, '') for col in df.columns}
                new_row_2 = {col: nova_linha_2_data.get(col, '') for col in df.columns}
                new_row_df = pd.DataFrame([new_row, new_row_2])

                # Split the original DataFrame
                upper = df.iloc[:conc_start]
                lower = df.iloc[conc_start:]

                df = pd.concat([upper, new_row_df, lower], ignore_index=True)
        except Exception as e:
            print(f"‚ùå Erro ao organizar DataFrame: {type(e).__name__} - {truncate_error(str(e))}")

        try:
            # Save the DataFrame
            df.to_excel(df_path, index=False, engine='openpyxl')
        except Exception as e:
            print(f"‚ùå Erro ao salvar dados hist√≥rico: {type(e).__name__} - {truncate_error(str(e))}")

    except Exception as erro:
        print(f"‚ùå Erro ao coletar dados hist√≥rico: {type(erro).__name__} - {truncate_error(str(erro))}")


# Fun√ß√£o para coletar executores e metas
def coletar_dados_listas(driver, tabela_xpath, index, df, df_path):
    """
       Coleta dados de uma tabela expandida e insere as informa√ß√µes em um DataFrame, salvando no formato Excel.

       A fun√ß√£o localiza uma tabela via XPath, coleta dados das c√©lulas (incluindo informa√ß√µes expandidas)
       e insere ou atualiza essas informa√ß√µes no DataFrame passado como par√¢metro. Se a linha a ser atualizada
       j√° contiver dados, ela ser√° preenchida. Caso contr√°rio, uma nova linha ser√° criada no DataFrame.

       Parameters:
           driver: Inst√¢ncia do WebDriver para controle da p√°gina e coleta de dados.
           tabela_xpath (str): XPath que localiza a tabela na p√°gina.
           index (int): √çndice da linha no DataFrame onde os dados devem ser inseridos ou atualizados.
           df (pd.DataFrame): DataFrame que cont√©m as linhas de dados a serem atualizadas.
           df_path (str): Caminho para o arquivo Excel onde o DataFrame ser√° salvo.

       Side Effects:
           - Interage com a p√°gina web, clicando para expandir a tabela.
           - Atualiza o DataFrame com os dados extra√≠dos da tabela.
           - Salva o DataFrame modificado em um arquivo Excel.

       Returns:
           None: A fun√ß√£o salva os dados no arquivo Excel e n√£o retorna nenhum valor.

       Exceptions:
           - Exce√ß√µes podem ser lan√ßadas se houver problemas ao localizar a tabela ou ao processar os dados.
           - Caso ocorram falhas ao clicar para expandir ou ao extrair dados das metas, a fun√ß√£o tentar√° continuar o processo.
       """
    print(f"\nüîß Processando Lista Executores ‚Äî √≠ndice {index}\n")

    def _wait_for_angular_stable():
        """Helper to wait for Angular to finish rendering"""
        driver.execute_async_script("""
        var callback = arguments[arguments.length - 1];
        if (window.getAllAngularTestabilities) {
            var testabilities = window.getAllAngularTestabilities();
            var count = testabilities.length;
            var decrement = function() {
                count--;
                if (count === 0) callback(true);
            };
            testabilities.forEach(function(t) {
                t.whenStable(decrement);
            });
        } else {
            callback(true);
        }
        """)

    # Extracts all metas from the currently expanded executor row
    def extract_metas_from_expanded_row():
        """
        Extracts all metas from the currently expanded executor row.
        Returns a list of dictionaries: each with meta, unidade_medida, quantidade.
        """
        try:
            remover_backdrop(driver)
            _wait_for_angular_stable()
            metas_path = ("/html/body/transferencia-especial-root/br-main-layout/div/div/div/main"
                          "/transferencia-especial-main/transferencia-plano-acao/transferencia-cadastro/br"
                          "-tab-set/div/nav/transferencia-plano-trabalho-executor/br-tab-set/div/nav/br-tab"
                          "/div/form/br-fieldset[1]/fieldset/div[2]/div[3]/div[2]/br-table/div/ngx-datatable")

            # Find all goal elements with retry logic
            goals = None
            for _ in range(10):  # Retry up to 3 times
                try:
                    goals = driver.find_elements(By.XPATH, f"{metas_path}//datatable-body-row")
                    if goals:
                        break
                    time.sleep(1)
                except StaleElementReferenceException:
                    continue

            # Get element location
            element_y = goals[0].location['y']
            navbar_height = 100  # Adjust based on your UI
            # Scroll to element position minus navbar offset
            driver.execute_script(f"window.scrollTo(0, {element_y - navbar_height});")

            # Process each goal with individual error handling
            goal_data_list = []
            for goal in goals:
                goal_data_list_partial = []
                try:
                    goal_cells_data = goal.find_elements(By.XPATH, ".//datatable-body-cell")
                    # Extract text from inner div or span
                    for goal_data in goal_cells_data[1:]:
                        # Some cells might have <div>, some might have <span>
                        goal_texts = goal_data.find_elements(By.XPATH, './div | ./span')

                        for goal_col in goal_texts:
                            goal_data_list_partial.append(goal_col.text.strip())

                    # Append first row od data
                    goal_data_list.append({
                        "meta": goal_data_list_partial[0],
                        "descri√ß√£o": goal_data_list_partial[1],
                        "unidade_medida": goal_data_list_partial[2],
                        "quantidade": goal_data_list_partial[3],
                        "meses_previstos": goal_data_list_partial[4]
                    })

                    expand_button = goal_cells_data[0].find_element(By.XPATH,
                                                                    ".//button[contains(@class, 'br-button')]")
                    expand_button.click()
                    try:
                        expanded_container = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, "div.expanded-container")))
                        # Skip headers
                        details = expanded_container.find_elements(By.CSS_SELECTOR,
                                                                   "div.row:not(:first-child)")
                        # Get detailed "meta" data
                        for detail in details:
                            cols = detail.find_elements(By.CSS_SELECTOR, "div[class^='col-sm-']")
                            detail_data = [col.text.strip() for col in cols]
                            goal_data_list.append({
                                "categoria": detail_data[0],
                                "emenda_Especial": detail_data[1],
                                "recurso_Pr√≥prio": detail_data[2],
                                "rendimento_aplica√ß√£o": detail_data[3],
                                "doa√ß√µes": detail_data[4],
                            })
                    except Exception as err:
                        print(f"‚ö†Ô∏è Erro ao extrair detalhes: {type(err).__name__}")
                        exc_type2, exc_obj2, exc_tb2 = sys.exc_info()
                        line_number2 = exc_tb2.tb_lineno
                        print(f"‚ö†Ô∏è Erro na linha {line_number2}: {type(err).__name__} - {err}")
                        continue

                    # Closes detailed "meta"
                    expand_button.click()

                except Exception as err:
                    print(f"‚ö†Ô∏è Erro ao extrair meta: {type(err).__name__}")
                    exc_type3, exc_obj3, exc_tb3 = sys.exc_info()
                    line_number3 = exc_tb3.tb_lineno
                    print(f"‚ö†Ô∏è Erro na linha {line_number3}: {type(err).__name__} - {err}")
                    continue
            print(f"‚õèÔ∏èüé≤ Metas Lista Executores Extra√≠dos")
            return goal_data_list

        except Exception as e:
            print(f"‚ùå Erro cr√≠tico ao extrair metas: {type(e).__name__} - {e}")
            return []

    def extract_social_control_data():
        try:
            remover_backdrop(driver)
            _wait_for_angular_stable()
            rows_sc_path = ("/html/body/transferencia-especial-root/br-main-layout/"
                            "div/div/div/main/transferencia-especial-main/"
                            "transferencia-plano-acao/transferencia-cadastro/br-tab-set/"
                            "div/nav/transferencia-plano-trabalho-executor/br-tab-set/div/"
                            "nav/br-tab/div/form/br-fieldset[3]/fieldset/div[2]/div[2]/div"
                            "/br-table/div/ngx-datatable")

            rows_sc = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located(
                (By.XPATH, f"{rows_sc_path}//datatable-body-row")))

            # Process each row with individual error handling
            sc_table_data = []
            grouped_sc_table_data = []

            for row_sc in rows_sc:
                try:
                    sc_data_cells = row_sc.find_elements(By.XPATH, ".//datatable-body-cell")
                    # Extract text from inner div or span
                    for cell in sc_data_cells:
                        # Some cells might have <div>, some might have <span>
                        texts = cell.find_elements(By.XPATH, './div | ./span')
                        for col in texts:
                            sc_table_data.append(col.text.strip())

                except Exception as ee:
                    print(f"‚ö†Ô∏è Erro ao extrair dados da tabela de controle social"
                          f": {type(ee).__name__} - {truncate_error(str(ee))}")

            # Groups all data with the same index in one list
            for el in range(0, len(sc_table_data), 3):
                grouped_sc_table_data.append(sc_table_data[el: el + 3])
            # Transpose the grouped list and join elements with ' | '
            if grouped_sc_table_data:
                transposed = list(zip(*grouped_sc_table_data))
                organized_sc_list = [' | '.join(map(str, group)) for group in transposed]
            else:
                organized_sc_list = []

            print(f"‚õèÔ∏èüé≤ Dados Sociais Lista Executores Extra√≠dos")
            return organized_sc_list

        except Exception as err:
            print(f"‚ùå Erro ao identificar a tabela dados de controle social."
                  f"\n{type(err).__name__} - {truncate_error(str(err))}")
            return [""] * 3
    try:
        if clicar_elemento(driver=driver, xpath=tabela_xpath, prt=False):
            pass
    except Exception as erro:
        print(f"‚ö†Ô∏è Tabela n√£o encontrada: {type(erro).__name__} - {truncate_error(str(erro))}")
        return

    # Start inserting from this point
    insert_index = index
    # üìù Save only the relevant columns to Excel
    colunas_para_salvar = [
        "Executor",
        "Objeto",
        "Meta",
        "Descri√ß√£o",
        "Unidade de Medida",
        "Quantidade",
        "Meses Previstos",
        "Categoria",
        "Emenda Especial",
        "Recurso Pr√≥prio",
        "Rendimento de Aplica√ß√£o",
        "Doa√ß√µes",
        "Email",
        "Respons√°vel_Social",
        "Data/Hora_Social",
        "Endere√ßo_Eletr√¥nico_Social"
    ]
    # Get data before expanding "metas" this is done to avoid duplicating these two information
    executor_dict = {
        "Executor": '',
        "Objeto": '',
    }
    # Get data from "metas"
    nova_linha_data = {
        "Meta": '',
        "Descri√ß√£o": '',
        "Unidade_medida": '',
        "Quantidade": '',
        "Meses_previstos": '',
        "Categoria": '',
        "Emenda_Especial": '',
        "Recurso_Pr√≥prio": '',
        "Rendimento_aplica√ß√£o": '',
        "Doa√ß√µes": '',
        "Email": '',
        "Respons√°vel_Social": '',
        "Data/Hora_Social": '',
        "Endere√ßo_Eletr√¥nico_Social": ''
    }
    emails_data = ''
    try:
        try:
            # Find table to count how many rows it has to iterate over
            rows = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located(
                (By.XPATH, f"{tabela_xpath}//datatable-body-row")))

            if not rows:
                print("‚ÑπÔ∏è Nenhuma linha encontrada na tabela")
                return
            # Iterate the first table to access the "metas"
            for row_index, row in enumerate(rows):
                remover_backdrop(driver)
                # Refind elements, to avoid stale element exception
                rows = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located(
                    (By.XPATH, f"{tabela_xpath}//datatable-body-row")))
                # Coleta a linha atual
                cells = rows[row_index].find_elements(By.XPATH, ".//div[contains(@class, "
                                                                "'datatable-body-cell')]")
                # Get executor/objeto from first row
                try:
                    executor = cells[1].text.strip() if len(cells) > 1 else ''
                    objeto = cells[2].text.strip() if len(cells) > 2 else ''

                    executor_dict.update({
                        "Executor": executor,
                        "Objeto": objeto,
                    })
                except Exception as e:
                    print(
                        f"‚ö†Ô∏è Dados n√£o encontrados: {type(e).__name__} - {truncate_error(str(e))}")

                # Expand to get executor detailed data
                try:
                    remover_backdrop(driver)
                    botao_expandir = cells[5].find_element(By.XPATH,
                                                           ".//button[contains(@class, 'br-button')]")
                    botao_expandir.click()
                except Exception as e:
                    print(f"‚ùå N√£o foi poss√≠vel clicar para expandir a tabela")
                    print(f"‚ö†Ô∏è Falha encontrada: {type(e).__name__} - {truncate_error(str(e))}")
                try:
                    # Get e-mails Lista de Conselhos locais ou inst√¢ncias de controle social
                    emails_path = (r'/html/body/transferencia-especial-root/br-main-layout/div/div/div/main'
                                   r'/transferencia-especial-main/transferencia-plano-acao/transferencia'
                                   r'-cadastro/br-tab-set/div/nav/transferencia-plano-trabalho-executor/br'
                                   r'-tab-set/div/nav/br-tab/div/form/br-fieldset[3]/fieldset/div[2]/div['
                                   r'1]/div[2]/br-table/div/ngx-datatable')

                    emails = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located(
                        (By.XPATH, f"{emails_path}//datatable-body-row")))

                    if len(emails) > 2:
                        emails_data = extract_all_rows_text(driver, emails_path)[1:]
                    else:
                        emails_data = obter_texto(driver, emails_path).split('\n')[-1]

                except Exception as e:
                    print(f"‚ö†Ô∏è Dados n√£o encontrados: {type(e).__name__} - {truncate_error(str(e))}")

                # Get Lista de Conselhos locais ou inst√¢ncias de controle social notifications
                social_control = extract_social_control_data()

                # Get metas
                try:
                    metas = extract_metas_from_expanded_row()
                except Exception as e:
                    metas = []
                    print(f"‚ùå Erro ao coletar metas: {type(e).__name__} - {truncate_error(str(e),
                                                                                          max_error_length=50)}")
                go_back_button_path = ('/html/body/transferencia-especial-root/br-main-layout/div/div/div'
                                       '/main/transferencia-especial-main/transferencia-plano-acao'
                                       '/transferencia-cadastro/br-tab-set/div/nav/transferencia-plano'
                                       '-trabalho-executor/br-tab-set/div/nav/br-tab/div/div/button')
                # retorna para a p√°gina de plano de trabalho
                driver.find_element(By.XPATH, go_back_button_path).click()

                nova_linha_data.update({
                    "Email": emails_data,
                    # All idexed values using comprehention
                    "Respons√°vel_Social": social_control[0],
                    "Data/Hora_Social": social_control[1],
                    "Endere√ßo_Eletr√¥nico_Social": social_control[2]
                })
                # Insert the initial nova_linha_data (email/social) to the DataFrame
                # Just-in-time merge for DataFrame insertion
                row_to_insert = {**executor_dict, **nova_linha_data}
                # Insert the merged row, filling empty cells where needed
                current_row_empty = True
                if insert_index < len(df):
                    current_row_empty = all(
                        pd.isna(df.at[insert_index, col]) or df.at[insert_index, col] == "" for col in
                        colunas_para_salvar
                    )
                if current_row_empty and insert_index < len(df):
                    # Fill existing empty row
                    for col in colunas_para_salvar:
                        df.at[insert_index, col] = row_to_insert.get(col, "")
                else:
                    insert_index += 1
                    # Convert the new data to a DataFrame
                    new_row = {col: row_to_insert.get(col, "") for col in df.columns}
                    new_row_df = pd.DataFrame([new_row])
                    # Split the original DataFrame
                    upper = df.iloc[:insert_index]
                    lower = df.iloc[insert_index:]
                    df = pd.concat([upper, new_row_df, lower], ignore_index=True)

                # Reset social data so it's not duplicated
                nova_linha_data.update({
                    "Email": '',
                    "Respons√°vel_Social": '',
                    "Data/Hora_Social": '',
                    "Endere√ßo_Eletr√¥nico_Social": ''
                })
                for i in range(0, len(metas), 3):
                    meta_main = metas[i]
                    meta_custeio = metas[i + 1]
                    meta_investimento = metas[i + 2]

                    # Reset values
                    nova_linha_data.update({
                        "Meta":  "",
                        "Descri√ß√£o":  "",
                        "Unidade de Medida":  "",
                        "Quantidade": "",
                        "Meses Previstos":  ""
                    })

                    # Now, you can safely build your nova_linha_data and financial_rows like this:
                    nova_linha_data.update({
                        "Meta": meta_main.get("meta", ""),
                        "Descri√ß√£o": meta_main.get("descri√ß√£o", ""),
                        "Unidade de Medida": meta_main.get("unidade_medida", ""),
                        "Quantidade": meta_main.get("quantidade", ""),
                        "Meses Previstos": meta_main.get("meses_previstos", "")
                    })
                    financial_rows = [
                        {
                            "Categoria": meta_custeio.get("categoria", ""),
                            "Emenda Especial": meta_custeio.get("emenda_Especial", ""),
                            "Recurso Pr√≥prio": meta_custeio.get("recurso_Pr√≥prio", ""),
                            "Rendimento de Aplica√ß√£o": meta_custeio.get("rendimento_aplica√ß√£o", ""),
                            "Doa√ß√µes": meta_custeio.get("doa√ß√µes", ""),
                        },
                        {
                            "Categoria": meta_investimento.get("categoria", ""),
                            "Emenda Especial": meta_investimento.get("emenda_Especial", ""),
                            "Recurso Pr√≥prio": meta_investimento.get("recurso_Pr√≥prio", ""),
                            "Rendimento de Aplica√ß√£o": meta_investimento.get("rendimento_aplica√ß√£o", ""),
                            "Doa√ß√µes": meta_investimento.get("doa√ß√µes", ""),
                        }
                    ]

                    try:
                        # Add financial values first
                        for f in financial_rows:
                            colunas_para_salvar_fin = colunas_para_salvar[7:12]
                            # Check if current row's columns are empty
                            current_row_empty = True
                            if insert_index < len(df):
                                current_row_empty = all(
                                    pd.isna(df.at[insert_index, col])
                                    or
                                    df.at[insert_index, col] == "" for col in colunas_para_salvar_fin
                                )
                            if current_row_empty and insert_index < len(df):
                                # Fill existing empty row
                                for col in colunas_para_salvar_fin:
                                    df.at[insert_index, col] = f.get(col, "")

                            else:
                                insert_index += 1

                                # Convert the new data to a DataFrame
                                new_row = {col: f.get(col, '') for col in df.columns}
                                new_row_df = pd.DataFrame([new_row])

                                # Split the original DataFrame
                                upper = df.iloc[:insert_index]
                                lower = df.iloc[insert_index:]

                                df = pd.concat([upper, new_row_df, lower], ignore_index=True)

                        # Add 'metas' data
                        current_row_empty = True
                        if insert_index < len(df):
                            current_row_empty = all(
                                pd.isna(df.at[insert_index, col])
                                or
                                df.at[insert_index, col] == "" for col in (colunas_para_salvar[:7] +
                                                                           colunas_para_salvar[13:]))
                        # Select columns
                        colunas_para_salvar_sel = colunas_para_salvar[:7] + colunas_para_salvar[13:]

                        if current_row_empty and insert_index < len(df):
                            # Fill existing empty row
                            for col in colunas_para_salvar_sel:
                                df.at[insert_index, col] = nova_linha_data.get(col, "")

                        else:
                            insert_index += 1

                            # Convert the new data to a DataFrame
                            new_row = {col: nova_linha_data.get(col, '') for col in df.columns}
                            new_row_df = pd.DataFrame([new_row])

                            # Split the original DataFrame
                            upper = df.iloc[:insert_index]
                            lower = df.iloc[insert_index:]

                            df = pd.concat([upper, new_row_df, lower], ignore_index=True)

                    except Exception as erro:
                        print(f"‚ùå Erro ao salvar listas no Excel: {type(erro).__name__} -"
                              f" {truncate_error(str(erro))}")
            # Send data to excel
            df.to_excel(df_path, index=False)
        except Exception as erro:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            line_number = exc_tb.tb_lineno
            print(f"‚ùå Erro ao extrair as linhas. Erro na linha: {line_number}\n{type(erro).__name__} -"
                  f" {truncate_error(str(erro))}")
    except Exception as erro:
        print(f"‚ùå Erro ao coletar dados: {type(erro).__name__} - {truncate_error(str(erro))}")


# Lineariza o dicion√°rio aninhado
def flatten_dict(d, parent_key='', sep='.'):
    """
    d ‚Üí dicion√°rio
    parent_key ‚Üí prefixo
    sep ‚Üí separador
    items ‚Üí resultado
    k ‚Üí chave
    v ‚Üí valor
    new_key ‚Üí caminho
    flatten_dict(...) ‚Üí recurs√£o
    """

    items = {}
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.update(flatten_dict(v, new_key, sep=sep))  # recurs√£o
        else:
            items[new_key] = v
    return items


# Verifica se a checkbox est√° marcada
def esta_selecionado(driver, use_second_case=False):
    """
    Checks which radio button ("Sim" or "N√£o") is selected and returns it under the key 'declaracoes'.

    Args:
        driver: Selenium WebDriver instance.
        use_second_case (bool): If True, checks the second possible radio group (for dual cases).

    Returns:
        dict: {"declaracoes": "Sim" | "N√£o" | None} (None if none selected or error)
    """
    try:
        # Locate the radio group dynamically (adjust selector if needed)
        if not use_second_case:
            # Case 1: First radio group (default)
            radio_group = driver.find_element(By.XPATH,
                                              "//div[@class='field disabled']//div[contains(@class, 'br-radio')]")
        else:
            # Case 2: Second radio group (if exists)
            radio_group = driver.find_element(By.XPATH,
                                              "(//div[@class='field disabled']//div[contains(@class, 'br-radio')])[2]")

        # Find all radio inputs in the group
        radio_buttons = radio_group.find_elements(By.XPATH, ".//input[@type='radio']")

        # Check which one is selected
        for radio in radio_buttons:
            if radio.is_selected():
                label = radio.find_element(By.XPATH, "./following-sibling::label").text
                return {"declaracoes": label}  # "Sim" or "N√£o"

        # If none selected
        return {"declaracoes": None}

    except Exception as e:
        print(f"Error: {e}")
        return {"declaracoes": None}


# Sobe os dados para o arquivo excel
def atualiza_excel(df_path, df, index, plano_acao: dict, col_range: list = None,
                   init_range: int = 0, fin_range: int = 0, second_init: bool = False):
    """
        Atualiza os dados de um arquivo Excel com informa√ß√µes extra√≠das de um dicion√°rio.

        A fun√ß√£o processa um dicion√°rio contendo dados (plano de a√ß√£o), filtra as chaves relevantes,
        e atualiza as c√©lulas de um DataFrame com os valores extra√≠dos. O DataFrame √© ent√£o salvo de volta
        no arquivo Excel especificado.

        Par√¢metros:
            df_path (str): Caminho para o arquivo Excel a ser atualizado.
            df (pd.DataFrame): DataFrame contendo os dados a serem atualizados no arquivo Excel.
            index (int): √çndice da linha no DataFrame onde os dados devem ser inseridos ou atualizados.
            plano_acao (dict): Dicion√°rio contendo os dados a serem extra√≠dos e atualizados.
            col_range (list, opcional): Lista com os √≠ndices das colunas a serem atualizadas. Se `None`,
                                         a fun√ß√£o atualizar√° as colunas padr√£o.
            init_range (int, opcional): √çndice inicial para a sele√ß√£o das chaves do dicion√°rio a serem usadas,
                                         caso `col_range` seja fornecido.
            fin_range (int, opcional): √çndice final para a sele√ß√£o das chaves do dicion√°rio a serem usadas,
                                       caso `col_range` seja fornecido.
            second_init (bool, opcional): Se `True`, recarrega o DataFrame do arquivo Excel antes de atualizar.

        Retorna:
            None: A fun√ß√£o modifica diretamente o DataFrame e salva no arquivo Excel.

        Exce√ß√µes:
            - Se alguma chave do dicion√°rio n√£o for encontrada no DataFrame, um aviso ser√° impresso.
            - Se o arquivo Excel n√£o puder ser acessado ou salvo, uma exce√ß√£o ser√° gerada.

        Observa√ß√µes:
            - O dicion√°rio `plano_acao` √© achatado antes de ser usado.
            - As chaves a serem usadas s√£o previamente selecionadas e mapeadas para colunas no Excel.
            - Caso `col_range` seja fornecido, as colunas selecionadas ser√£o atualizadas com os dados correspondentes.

        """

    selected_keys = [
        "pagamentos.empenho",
        "pagamentos.valor",
        "pagamentos.ordem",
        "declaracoes.recursos_orcamento",
        "classificacao_orcamentaria",
        "declaracoes.nao_uso_pessoal",
        "prazo_de_execucao",
        "periodo_exec",
        "controle_social.conselhos",
        "controle_social.instancias"
    ]

    # Flatten the dictionary and filter only selected keys
    flat_dict = flatten_dict(plano_acao)
    filtered_data = {k: flat_dict.get(k, "") for k in selected_keys if flat_dict.get(k) not in [None, ""]}

    # Map to Excel columns
    column_headers = [
        "Empenho", "Valor", "Ordem do Pagamento", "Indica√ß√£o Or√ßamento Beneficiario",
        "Classifica√ß√£o Or√ßament√°ria de Despesa", "Declara√ß√£o Recurso", "Prazo Execu√ß√£o", "Per√≠odo Execu√ß√£o"
    ]
    if second_init:
        df = pd.read_excel(df_path, dtype=str)

    if col_range:
        columns_range = col_range
        selected_keys = list(flat_dict.keys())[init_range:fin_range]

        for col_idx, key in zip(columns_range, selected_keys):
            value = flat_dict.get(key, "")
            df[df.columns[col_idx]] = df[df.columns[col_idx]].astype('object')
            df.iat[index, col_idx] = value  # iat is used for fast scalar access

    else:
        # Update Excel cells
        for col_name, value in zip(column_headers, filtered_data.values()):
            if col_name in df.columns:
                col_idx = df.columns.get_loc(col_name)
                df[df.columns[col_idx]] = df[df.columns[col_idx]].astype('object')
                df.iat[index, col_idx] = value
            else:
                print(f"‚ö†Ô∏è Column '{col_name}' not found in DataFrame")

    df.to_excel(df_path, index=False)


# Verify is the row has data in it
def has_actual_data(x):
    """Returns True if value is non-empty and non-NA"""
    if pd.isna(x):
        return False
    if isinstance(x, str):
        return x.strip() != ""
    return True  # Numbers, booleans, etc.


# Debugger funtion for list
def list_debugger(my_list):
    print("\n DEBUG START :=^50")
    print("1. Full list:", my_list)
    print("2. Length:", len(my_list))
    print("3. Indices and items:")
    for i, item in enumerate(my_list):
        print(f"   [{i}]: {item}")
    print("=== DEBUG END ===\n")


# Fun√ß√£o principal
def main():
    driver = conectar_navegador_existente()

    planilha_final = (r"C:\Users\felipe.rsouza\OneDrive - Minist√©rio do Desenvolvimento e Assist√™ncia "
                      r"Social\Teste001\Sofia\Emendas pix 2025\Emendas pix 2025 - Copia.xlsx")

    try:
        df = pd.read_excel(planilha_final, engine='openpyxl').astype(object)
        print(f"‚úÖ Planilha lida com {len(df)} linhas.")

        # Clica no que menu de navega√ß√£o
        clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/br-header/"
                                "header/div/div[2]/div/div[1]/button/span")
        # Clica em 'Plano de A√ß√£o'
        clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/div/div/div/"
                                "div/br-side-menu/nav/div[3]/a/span[2]")

        remover_backdrop(driver)

        # Clica no √≠cone para filtrar
        clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/div/div/div/"
                                "main/transferencia-especial-main/transferencia-plano-acao/transferencia-plano-acao-consulta/br-table/div/div/div/button/i")

        # Processa cada linha do DataFrame usando o √≠ndice
        index = 0
        # for index, row in df.iterrows():
        while index < len(df):
            print(f'Procentagem completa: {(index/len(df) * 100)}%'.center(50))

            row = df.iloc[index]
            plano_acao = {
                "beneficiario": {
                    "nome": "",  # Nome do benefici√°rio
                    "uf": ""  # Unidade Federativa (estado)
                },
                "dados_bancarios": {
                    "banco": "",  # Nome do banco
                    "agencia": "",  # N√∫mero da ag√™ncia
                    "conta": "",  # N√∫mero da conta
                    "situacao": ""  # Situa√ß√£o atual da conta
                },
                "emenda": {
                    "numero": "",  # N√∫mero/identifica√ß√£o da emenda
                    "valor": "",  ## Valor de investimento
                    "custeio": ""  # Valor de custeio
                },
                "finalidade": "",

                "objeto_de_execu√ß√£o": "",  # Dados Complementares do Plano -> Objeto de Execu√ß√£o

                "pagamentos": {
                    "empenho": "",  # N√∫mero do empenho
                    "valor": "", # Valor total
                    "ordem": "",  # N√∫mero da ordem de pagamento

                },
                "declaracoes": {
                    "recursos_orcamento": False,  # Recursos no or√ßamento pr√≥prio?
                    "nao_uso_pessoal": False  # N√£o ser√° usado para pessoal/d√≠vida?
                },
                "execucao": {
                    "executor": "",  # Nome do executor
                    "objeto": "",  # Objeto do projeto
                },
                "metas": {
                    "descricao": "",  # Descri√ß√£o da meta
                    "unidade": "",  # Unidade de medida
                    "quantidade": "",  # Quantidade prevista
                    "meses_previstos": "", # Meses previstos
                },
                "historico": {
                    "responsavel": "",  # Hist√≥rico registrado no sistema
                    "data": "",
                    "situacao": ""  # Hist√≥rico ap√≥s conclus√£o
                },
                "controle_social": {
                    "conselhos": "",  # Informa√ß√µes dos conselhos locais
                    "instancias": ""  # Inst√¢ncias de controle social
                },
                "periodo_exec ": "",
                "prazo_de_execucao": "",
                "classificacao_orcamentaria": "",
            }

            codigo = str(row["C√≥digo do Plano de A√ß√£o"])  # Garante que o c√≥digo seja string

            # Verifica se o c√≥digo j√° foi processado (coluna "Respons√°vel" preenchida e diferente de erro)
            row_without_first_col = row.iloc[1:]  # Excludes index 0 (first column)
            if row_without_first_col.apply(has_actual_data).any():
                print(f"‚è≠Ô∏è Pulando linha... {index} ")
                index += 1
                continue

            if pd.isna(df.at[index, "C√≥digo do Plano de A√ß√£o"]):
                index += 1
                continue

            print(f"\n{' Inicio do loop ':=^60}\n")
            print(f"Processando c√≥digo: {codigo} (√≠ndice: {index})\n")

            try:
                # Insere o c√≥digo no campo de filtro
                xpath_campo_filtro = ("/html/body/transferencia-especial-root/br-main-layout/"
                                      "div/div/div/main/transferencia-especial-main/transferencia-plano-acao/"
                                      "transferencia-plano-acao-consulta/br-table/div/br-fieldset/fieldset/"
                                      "div[2]/form/div[1]/div[2]/br-input/div/div[1]/input")
                if not inserir_texto(driver, xpath_campo_filtro, codigo):
                    raise Exception("Falha ao inserir o c√≥digo no filtro")

                # Vari√°veis para o retry
                max_tentativas = 10  # N√∫mero m√°ximo de tentativas
                tentativa = 1
                codigo_tabela_xpath = ("/html/body/transferencia-especial-root/br-main-layout/div/div/div"
                                       "/main/transferencia-especial-main/transferencia-plano-acao"
                                       "/transferencia-plano-acao-consulta/br-table/div/ngx-datatable/div"
                                       "/datatable-body/datatable-selection/datatable-scroller/datatable"
                                       "-row-wrapper/datatable-body-row/div[2]/datatable-body-cell[2]"
                                       "/div/span")

                # Verifica se o c√≥digo na tabela filtrada √© igual ao c√≥digo no campo de filtro
                codigo_correspondente = False
                while tentativa <= max_tentativas and not codigo_correspondente:
                    print(f"‚ÑπÔ∏è Tentativa {tentativa} de {max_tentativas} para filtrar o c√≥digo {codigo}")

                    # Aplica o filtro
                    if not clicar_elemento(driver,
                                           "/html/body/transferencia-especial-root/br-main-layout/div/"
                                           "div/div/main/transferencia-especial-main/transferencia-plano-acao/"
                                           "transferencia-plano-acao-consulta/br-table/div/"
                                           "br-fieldset/fieldset/div[2]/form/div[5]/div/button[2]"):
                        raise Exception("Falha ao aplicar o filtro")

                    # Aguarda a tabela atualizar
                    WebDriverWait(driver, 7).until(
                        EC.presence_of_element_located((By.XPATH, codigo_tabela_xpath))
                    )
                    time.sleep(0.5)  # Pequeno delay adicional para garantir a atualiza√ß√£o

                    # Verifica o c√≥digo na tabela
                    codigo_tabela = obter_texto(driver, codigo_tabela_xpath)
                    if not codigo_tabela:
                        print(f"‚ö†Ô∏è N√£o foi poss√≠vel obter o c√≥digo na tabela na tentativa {tentativa}")
                    elif codigo_tabela.strip() == codigo.strip():
                        print(f"‚úÖ C√≥digo verificado com sucesso: {codigo_tabela}")
                        codigo_correspondente = True
                    else:
                        print(f"‚ö†Ô∏è C√≥digo na tabela ({codigo_tabela}) n√£o corresponde ao inserido ({codigo})"
                              f" na tentativa {tentativa}")
                        time.sleep(1)  # Espera antes de tentar novamente

                    tentativa += 1

                if not codigo_correspondente:
                    raise Exception(f"Falha ao filtrar o c√≥digo {codigo} ap√≥s {max_tentativas} tentativas."
                                    f" √öltimo c√≥digo na tabela: {codigo_tabela}")

                # Clica em "Detalhar" somente se o c√≥digo estiver correto
                detalhar_xpath = ("/html/body/transferencia-especial-root/br-main-layout/div/div/div/main"
                                  "/transferencia-especial-main/transferencia-plano-acao/transferencia"
                                  "-plano-acao-consulta/br-table/div/ngx-datatable/div/datatable-body"
                                  "/datatable-selection/datatable-scroller/datatable-row-wrapper/datatable"
                                  "-body-row/div[2]/datatable-body-cell[9]/div/div/button")

                if not clicar_elemento(driver, detalhar_xpath):
                    raise Exception("Falha ao clicar em 'Detalhar'")

                remover_backdrop(driver)

                print(f"\n{' Inicio do loop da primeira p√°gina ':=^60}\n")
                # Coleta os dados da primeira pagina
                plano_acao = loop_primeira_pagina(driver=driver, plano_acao=plano_acao)
                domain = list(range(1, 12))
                atualiza_excel(
                    df_path=planilha_final,  # Excel file path
                    df=df,  # DataFrame to modify
                    index=index,  # Row index to update (REQUIRED)
                    col_range=domain,
                    plano_acao=plano_acao,  # Dictionary containing data
                    init_range=0,  # First key to use from flattened dict
                    fin_range=11  # Last key to use (exclusive)
                )

                print(f"\n{' Inicio do loop da segunda p√°gina ':=^60}\n")
                # Coleta os dados da segunda pagina
                plano_acao = loop_segunda_pagina(driver=driver, plano_acao=plano_acao, index=index, df=df,
                                                 df_path=planilha_final)
                atualiza_excel(
                    df_path=planilha_final,  # Excel file path
                    df=df,  # DataFrame to modify
                    index=index,  # Row index to update (REQUIRED)
                    plano_acao=plano_acao,  # Dictionary containing data
                    second_init=True
                )

                print(f"\n{' Fim do loop ':=^60}\n")

                df = pd.read_excel(planilha_final, engine='openpyxl').astype(object)

                # Sobe para o topo da p√°gina
                driver.execute_script("window.scrollTo(0, 0);")
                # Volta para a sele√ß√£o do plano de a√ß√£o
                clicar_elemento(driver,
                                "/html/body/transferencia-especial-root/br-main-layout/div/div/div/main"
                                "/div[1]/br-breadcrumbs/div/ul/li[2]/a")
                # Clica em "Filtrar" para o pr√≥ximo c√≥digo
                clicar_elemento(driver,
                                "/html/body/transferencia-especial-root/br-main-layout/div/div/div/main"
                                "/transferencia-especial-main/transferencia-plano-acao/transferencia-plano"
                                "-acao-consulta/br-table/div/div/div/button/i")

                index += 1

            except Exception as erro:
                last_error = truncate_error(f"Main loop element intercepted: {str(erro)}")
                print(f"‚ö†Ô∏è {last_error}")

                try:
                    clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/"
                                            "div/div/div/main/transferencia-especial-main/"
                                            "transferencia-plano-acao/transferencia-plano-acao-consulta/"
                                            "br-table/div/div/div/button")
                except:
                    print("‚ö†Ô∏è Falha ao recuperar a tela de consulta. Reiniciando navega√ß√£o...")
                    driver.get("about:blank")
                    clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/"
                                            "br-header/header/div/div[2]/div/div[1]/button/span")
                    clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/"
                                            "div/div/div/div/br-side-menu/nav/div[3]/a/span[2]")
                    remover_backdrop(driver)
                    clicar_elemento(driver, "/html/body/transferencia-especial-root/br-main-layout/"
                                            "div/div/div/main/transferencia-especial-main/"
                                            "transferencia-plano-acao/transferencia-plano-acao-consulta/"
                                            "br-table/div/div/div/button/i")
                continue

        print("‚úÖ Todos os dados foram coletados e salvos na planilha!")
        driver.quit()
    except Exception as erro:
        last_error = truncate_error(f"Element intercepted: {str(erro)}, {type(erro).__name__}")
        print(f"‚ùå {last_error}")


if __name__ == "__main__":
    main()